
// Grid

// $author										Amended by T.Reed and A.Coady from the original semantic.gs by Tyler Tate - @tylertate
// $url												http://www.thisiszone.com/
// $copyright									Copyright (c) 2012, thisiszone.com. All rights reserved.
// $version										2.0
// 

// -------------------------------------------------------------------------------- 
// ---------- Variables -----------------------------------------------------------
// -------------------------------------------------------------------------------- 

$column-width: 60px;
$gutter-width: 20px;
$columns: 12;


// -------------------------------------------------------------------------------- 
// ---------- Utility function ----------------------------------------------------
// -------------------------------------------------------------------------------- 
// You should never need to modify this

@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * $columns);
}

// Set $total-width to 100% for a fluid layout
$total-width: gridsystem-width($columns);
$total-width: 100%;


// -------------------------------------------------------------------------------- 
// ---------- IE6/7 Fix ----------------------------------------------------------- 
// -------------------------------------------------------------------------------- 
// Uncomment these two lines and the star-hack width/margin lines below to enable 
// sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
//
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;


// -------------------------------------------------------------------------------- 
// ---------- Grid ----------------------------------------------------------------
// -------------------------------------------------------------------------------- 

body {
	width: 100%;
}
@mixin row($columns:$columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
	margin-left: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	margin-right: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	// *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
	// *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
	@include clearfix();
}
@mixin column($x,$columns:$columns) {
	display: inline;
	float: left;
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
	margin-left: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
	margin-right: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
  position: relative;
	// *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
	// *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}


// -------------------------------------------------------------------------------- 
// ---------- Push and Pull -------------------------------------------------------
// -------------------------------------------------------------------------------- 
// Move grid items right or left relative to its current position

@mixin push($offset:1) {
	left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns));
}
@mixin pull($offset:1) {
	right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns));
}